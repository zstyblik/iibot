#!/bin/sh
# 2012/Sep/09 @ Zdenek Styblik
# Original autor: c00kiemon5ter(Ivan Kanakarakis)
# Desc: Shell portable and improved(?) version of iibot by c00kiemon5ter
#
# Example of .cfg file:
# ~~~
# net:irc.ssh.cz:#chan1 #chan2
# nickname:tester
# ircdir:$HOME/ii/
# ~~~
#

IRC_CONFIG=${1:?Supply name of IRC config to use.}

if [ -e "${IRC_CONFIG}.lock" ]; then
	printf "Lock for '%s' already exists.\n" "${IRC_CONFIG}" 1>&2
	exit 1
fi

if [ ! -r "${IRC_CONFIG}" ]; then
	printf "Config file '%s' doesn't exist or is not readable.\n" \
		"${IRC_CONFIG}" 1>&2
	exit 2
fi

trap "{ rm -f ${IRC_CONFIG}.lock; }" 1 9 15

ircdir=$(grep -e '^ircdir:' "${IRC_CONFIG}" | cut -d ':' -f 2- | head -n 1)
ircdir=${ircdir:-${HOME}/tmp/ii/ii/}
nickname=$(grep -e '^nickname:' "${IRC_CONFIG}" | awk -F':' '{ print $2 }' |\
	head -n 1)
nickname=${nickname:-"testme"}

# some privacy please, thanks
chmod 700 "${ircdir}"
chmod 600 "${ircdir}"/*/ident 1> /dev/null 2>&1

monitor()
{
	local iipid="${1}"
	tail -f -n1 --pid=${iipid} "${ircdir}/${network}/${channel}/out" | \
		while read -r date time nick msg; do
			# if msg is by the system ignore it
			if [ "$nick" = '-!-' ]; then
				continue
			fi
			# strip < and >. if msg is by ourself ignore it
			# printf -- "'%s'\n" "${nick}" 1>&2 # Debugging left-over???
			nick=$(printf -- "${nick}" | sed -e 's@^<@@' | sed -e 's@>$@@')
			if [ "${nick}" = "${nickname}" ]; then
				continue
			fi

			# if msg contains a url, transform to url command
			if printf -- "%s" "${msg}" | grep -q -E -e 'https?://' ; then
				exec "${ircdir}/iicmd" "${nick}" "url ${msg#* }" "${ircdir}" "${network}" \
					"${channel}" "${nickname}" | fold -w 255 &
				continue
			fi
			# if msg is a command, invoke iicmd
			if printf -- "%s" "${msg}" | grep -q -E -e '^!' ; then
				exec "${ircdir}/iicmd" "${nick}" "${msg#\!}" "${ircdir}" "${network}" \
					"${channel}" "${nickname}" | fold -w 255 &
				continue
			fi
		done > "${ircdir}/${network}/${channel}/in"
}

monitor_link()
{
	local iipid=${1}
	IFS='
'
	tail -f -n1 --pid=${iipid} "${ircdir}/${network}/out" | \
		while read -r response; do
			if printf -- "%s" "${response}" | grep -q -i -e 'Closing Link' -e 'ping timeout'; then
				kill "${iipid}"
				break
			fi
		done
}

for network in $(grep -e '^net:' "${IRC_CONFIG}" | awk -F':' '{ print $2 }' | uniq); do
	pids=""
	while true; do
		# cleanup
		rm -f "${ircdir}/${network}/in"

		# connect to netwrok - password is set through the env var IIPASS
		${ircdir}/ii -i "${ircdir}" -n "${nickname}" -s "${network}" \
			-f "${nickname}" >> "${ircdir}/${network}.log" 2>&1 &
		pid="$!"

		# wait for the connection
		time_slept=0
		while ! test -p "${ircdir}/${network}/in"; do
			sleep 1;
			time_slept=$((time_slept+1))
			if [ ${time_slept} -ge 15 ]; then
				break
			fi
		done

		touch "${IRC_CONFIG}.lock"
		monitor_link "$pid" &
		pids=$(printf -- "%s %s" "${pids}" $!)

		# auth to services
		if [ -e "${ircdir}/${network}/ident" ]; then
			printf -- "/j nickserv identify %s\n" \
				"$(cat "${ircdir}/${network}/ident")" > "${ircdir}/${network}/in"
		fi
		# clean that up - ident passwd is in there
		rm -f "${ircdir}/${network}/nickserv/out"

		sleep 3
		# join channels
		for channel in $(grep -E -e "^net:${network}:" "${IRC_CONFIG}" | awk -F':' '{ print $3 }'); do
			printf -- "/j %s\n" "${channel}" > "${ircdir}/${network}/in"
			if [ ! -e "${ircdir}/${network}/${channel}/out" ]; then
				touch "${ircdir}/${network}/${channel}/out"
			fi
			monitor "${pid}" &
			pids=$(printf -- "%s %s" "${pids}" $!)
		done

		# if connection is lost reconnect
		wait "${pid}"
		printf -- "${pids}" | xargs kill
		rm -f "${IRC_CONFIG}.lock"
	done &
done
# EOF
